import{_ as s,c as a,d as p,o as t}from"./app-DQTJ0J-h.js";const e={};function o(l,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="node与邮箱邮件发送" tabindex="-1"><a class="header-anchor" href="#node与邮箱邮件发送"><span>NODE与邮箱邮件发送</span></a></h1><h3 id="node与邮箱邮件发送-1" tabindex="-1"><a class="header-anchor" href="#node与邮箱邮件发送-1"><span>NODE与邮箱邮件发送</span></a></h3><p>邮箱验证码思路</p><p>验证码发送阶段</p><p>客户端上传邮箱地址到服务端，服务端通过生成随机验证码，并将这个验证码发送到用户上传的这个邮箱中。此时服务端需要将这个邮箱和验证码保存到数据库的某张表中（后文中使用Code来称呼这个表），同时保证这条记录的唯一性。并在有效时间内将这条记录删除（此时间就是验证码的有效时间）</p><p>验证码验证阶段</p><p>客户端将收到的验证码和邮箱重新发送到服务端，服务端开始验证：</p><p>是否能够从Code中查询到这条验证码和邮箱与客户端发送一致的记录 是：验证通过，并删除这条记录 否：验证不通过 验证码发送阶段 ————————————————</p><p><strong>安装</strong></p><p>安装提供发送邮件的模块：<code>nodemailer</code>、<code>nodemailer-smtp-transport</code></p><p><strong>使用</strong></p><p><strong>引入发送邮件的模块</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> nodemailer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;nodemailer&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">const</span> smtpTransport <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;nodemailer-smtp-transport&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>创建连接对象</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> transport <span class="token operator">=</span> nodemailer<span class="token punctuation">.</span><span class="token function">createTransport</span><span class="token punctuation">(</span><span class="token function">smtpTransport</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;smtp.163.com&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 服务 由于我用的163邮箱</span></span>
<span class="line">    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">465</span><span class="token punctuation">,</span> <span class="token comment">// smtp端口 默认无需改动</span></span>
<span class="line">    <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;crackerlink@163.com&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 用户名</span></span>
<span class="line">      <span class="token literal-property property">pass</span><span class="token operator">:</span> <span class="token string">&#39;xxxxxxxxx&#39;</span> <span class="token comment">// SMTP授权码</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>host:如果发件使用sina邮箱的话就填写 smtp.sina.com；qq邮箱同理 secure:如果为true，则连接到服务器时连接将使用TLS。如果为false（默认值），则在服务器支持STARTTLS扩展名的情况下使用TLS。在大多数情况下，如果要连接到端口465，请将此值设置为true。对于端口587或25，请将其保留为false auth:发件人身份验证对象 user:用户名 pass：SMTP授权码 (通常在邮箱网站的设置里) login:认真类型,默认login（普通用户无需填写这一项）</p><p><strong>生成随机验证码函数 及 邮箱验证正则</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">randomFns</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 生成6位随机数</span></span>
<span class="line">    <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        code <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> code </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> <span class="token keyword">const</span> regEmail<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">//验证邮箱正则</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>建立连接发送验证码</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> <span class="token constant">EMAIL</span><span class="token operator">=</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>e_mail <span class="token comment">//req为请求体对象 我使用的是post请求方式，所以通过req.body获取用户提交的邮箱</span></span>
<span class="line"> <span class="token keyword">if</span> <span class="token punctuation">(</span>regEmail<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token constant">EMAIL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//邮箱验证通过</span></span>
<span class="line">   <span class="token keyword">let</span> code<span class="token operator">=</span><span class="token function">randomFns</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">   transport<span class="token punctuation">.</span><span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">     <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&#39;crackerlink@163.com&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 发件邮箱</span></span>
<span class="line">     <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token constant">EMAIL</span><span class="token punctuation">,</span> <span class="token comment">// 收件列表</span></span>
<span class="line">     <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token string">&#39;验证你的电子邮件&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 标题</span></span>
<span class="line">     <span class="token literal-property property">html</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">     &lt;p&gt;你好！&lt;/p&gt;</span>
<span class="line">     &lt;p&gt;您正在注册Cracker社区账号&lt;/p&gt;</span>
<span class="line">     &lt;p&gt;你的验证码是：&lt;strong style=&quot;color: #ff4e2a;&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/strong&gt;&lt;/p&gt;</span>
<span class="line">     &lt;p&gt;***该验证码5分钟内有效***&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token comment">// html 内容</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">,</span> </span>
<span class="line">   <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">&quot;发送验证码错误！&quot;</span><span class="token punctuation">)</span></span>
<span class="line">     transport<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果没用，关闭连接池</span></span>
<span class="line">   <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">   <span class="token comment">//....验证码发送后的相关工作 </span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">     <span class="token function">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">422</span><span class="token punctuation">,</span><span class="token string">&#39;请输入正确的邮箱格式！&#39;</span><span class="token punctuation">)</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>验证码发送后的相关工作</strong></p><p>接下来需要将这个邮箱和验证码保存到<strong>Code</strong>中，同时保证这条记录的唯一性。并在<strong>5分钟</strong>内将这条记录删除</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">const Code = require(&quot;../models/Code&quot;)</span>
<span class="line">    const e_mail = EMAIL</span>
<span class="line">    await Code.deleteMany({e_mail}) //删除该旧的验证码，保证该邮箱是最新的验证码有效</span>
<span class="line">    const [data] = await Code.insertMany({e_mail,veri_code:code}) //插入新邮箱验证码组合</span>
<span class="line">    setTimeout(async ()=&gt;{    //5分钟后删除</span>
<span class="line">        await Code.deleteMany({e_mail})</span>
<span class="line">    },1000*60*5)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>发送阶段完整代码</strong><strong>（推荐将其封装为中间件）</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token parameter">app</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> nodemailer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;nodemailer&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> smtpTransport <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;nodemailer-smtp-transport&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> assert <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http-assert&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">const</span> transport <span class="token operator">=</span> nodemailer<span class="token punctuation">.</span><span class="token function">createTransport</span><span class="token punctuation">(</span><span class="token function">smtpTransport</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">&#39;smtp.163.com&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 服务</span></span>
<span class="line">        <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">465</span><span class="token punctuation">,</span> <span class="token comment">// smtp端口</span></span>
<span class="line">        <span class="token literal-property property">secure</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">auth</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;crackerlink@163.com&#39;</span><span class="token punctuation">,</span> <span class="token comment">//用户名</span></span>
<span class="line">          <span class="token literal-property property">pass</span><span class="token operator">:</span> <span class="token string">&#39;xxxxxxx&#39;</span> <span class="token comment">// SMTP授权码</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      </span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">randomFns</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 生成6位随机数</span></span>
<span class="line">        <span class="token keyword">let</span> code <span class="token operator">=</span> <span class="token string">&quot;&quot;</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            code <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> code </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">const</span> regEmail<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$</span><span class="token regex-delimiter">/</span></span> <span class="token comment">//验证邮箱正则</span></span>
<span class="line">      </span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">async</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res<span class="token punctuation">,</span>next</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">let</span> <span class="token constant">EMAIL</span><span class="token operator">=</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>e_mail</span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>regEmail<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token constant">EMAIL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">let</span> code<span class="token operator">=</span><span class="token function">randomFns</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">          transport<span class="token punctuation">.</span><span class="token function">sendMail</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">from</span><span class="token operator">:</span> <span class="token string">&#39;crackerlink@163.com&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 发件邮箱</span></span>
<span class="line">            <span class="token literal-property property">to</span><span class="token operator">:</span> <span class="token constant">EMAIL</span><span class="token punctuation">,</span> <span class="token comment">// 收件列表</span></span>
<span class="line">            <span class="token literal-property property">subject</span><span class="token operator">:</span> <span class="token string">&#39;验证你的电子邮件&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 标题</span></span>
<span class="line">            <span class="token literal-property property">html</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">            &lt;p&gt;你好！&lt;/p&gt;</span>
<span class="line">            &lt;p&gt;您正在注册Cracker社区账号&lt;/p&gt;</span>
<span class="line">            &lt;p&gt;你的验证码是：&lt;strong style=&quot;color: #ff4e2a;&quot;&gt;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>code<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/strong&gt;&lt;/p&gt;</span>
<span class="line">            &lt;p&gt;***该验证码5分钟内有效***&lt;/p&gt;</span><span class="token template-punctuation string">\`</span></span> <span class="token comment">// html 内容</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">,</span> </span>
<span class="line">          <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token operator">!</span>error<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token string">&quot;发送验证码错误！&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            transport<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 如果没用，关闭连接池</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span>        </span>
<span class="line">          <span class="token keyword">const</span> Code <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../models/Code&quot;</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token keyword">const</span> e_mail <span class="token operator">=</span> <span class="token constant">EMAIL</span></span>
<span class="line">          <span class="token keyword">await</span> Code<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>e_mail<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token keyword">const</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> Code<span class="token punctuation">.</span><span class="token function">insertMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>e_mail<span class="token punctuation">,</span><span class="token literal-property property">veri_code</span><span class="token operator">:</span>code<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token comment">//5分钟后失效</span></span>
<span class="line">              <span class="token keyword">await</span> Code<span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>e_mail<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">assert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token number">422</span><span class="token punctuation">,</span><span class="token string">&#39;请输入正确的邮箱格式！&#39;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>验证码验证阶段</strong></p><p>验证阶段只需要通过获取用户得邮箱和验证码是否在<strong>Code</strong>中查询到即可</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line">router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">&#39;/new&#39;</span><span class="token punctuation">,</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span>e_mail<span class="token punctuation">,</span>veri_code<span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body</span>
<span class="line">    <span class="token comment">// 验证码验证</span></span>
<span class="line">    <span class="token keyword">const</span> vire <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../../models/Code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">{</span>e_mail<span class="token punctuation">,</span>veri_code<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">assert</span><span class="token punctuation">(</span>vire<span class="token punctuation">,</span><span class="token number">422</span><span class="token punctuation">,</span><span class="token string">&#39;验证码出错&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">await</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;../../models/Code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>e_mail<span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">message</span><span class="token operator">:</span><span class="token string">&quot;验证码正确&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28)]))}const i=s(e,[["render",o]]),r=JSON.parse('{"path":"/posts/backend/NODE%E4%B8%8E%E9%82%AE%E7%AE%B1%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81.html","title":"NODE与邮箱邮件发送","lang":"en-US","frontmatter":{"date":"2025-06-16T00:00:00.000Z","category":["backend"],"tag":["node","backend"]},"headers":[{"level":3,"title":"NODE与邮箱邮件发送","slug":"node与邮箱邮件发送-1","link":"#node与邮箱邮件发送-1","children":[]}],"git":{"updatedTime":1751795114000,"contributors":[{"name":"Tom-Lee-CN","username":"Tom-Lee-CN","email":"tomweichat@qq.com","commits":2,"url":"https://github.com/Tom-Lee-CN"}],"changelog":[{"hash":"3f2e749601bd7757724bc54b5f58ffaa265d06ff","time":1751795114000,"email":"tomweichat@qq.com","author":"Tom-Lee-CN","message":"更新旧文章结构."},{"hash":"e0b494e91703a4447a9723c1c58141b1fd0ff96a","time":1750089735000,"email":"tomweichat@qq.com","author":"Tom-Lee-CN","message":"新增几个文档"}]},"filePathRelative":"posts/backend/NODE与邮箱邮件发送.md","excerpt":"\\n<h3>NODE与邮箱邮件发送</h3>\\n<p>邮箱验证码思路</p>\\n<p>验证码发送阶段</p>\\n<p>客户端上传邮箱地址到服务端，服务端通过生成随机验证码，并将这个验证码发送到用户上传的这个邮箱中。此时服务端需要将这个邮箱和验证码保存到数据库的某张表中（后文中使用Code来称呼这个表），同时保证这条记录的唯一性。并在有效时间内将这条记录删除（此时间就是验证码的有效时间）</p>\\n<p>验证码验证阶段</p>\\n<p>客户端将收到的验证码和邮箱重新发送到服务端，服务端开始验证：</p>\\n<p>是否能够从Code中查询到这条验证码和邮箱与客户端发送一致的记录\\n是：验证通过，并删除这条记录\\n否：验证不通过\\n验证码发送阶段\\n————————————————</p>"}');export{i as comp,r as data};
