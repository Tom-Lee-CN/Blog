import{_ as s,c as a,d as e,o as p}from"./app-DCzuWk7c.js";const t={};function o(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="pinia-使用方法" tabindex="-1"><a class="header-anchor" href="#pinia-使用方法"><span>pinia 使用方法</span></a></h1><h2 id="什么是-pinia" tabindex="-1"><a class="header-anchor" href="#什么是-pinia"><span>什么是 pinia</span></a></h2><p>Pinia 是 Vue 的官方状态管理工具，作为 Vuex 的继任者，为 Vue 3 提供了更现代、灵活且易用的状态管理解决方案。它主要用于管理应用中的全局状态，特别适合在多个组件间共享数据的场景。</p><h2 id="主要功能介绍" tabindex="-1"><a class="header-anchor" href="#主要功能介绍"><span>主要功能介绍</span></a></h2><p>在官方文档中，Pinia 提供了四种功能，分别是：</p><p>Store：在 Pinia 中，每个状态管理模块都被称为一个 Store。开发者需要创建一个 Store 实例来定义和管理状态。<br> State：在 Store 中定义状态。可以使用 defineState 函数来定义一个状态，并通过 state 属性来访问它。<br> Getters：类似于 Vuex 中的 getters，用于从 State 中派生出一些状态。可以使用 defineGetters 函数来定义 getters。<br> Actions：在 Pinia 中，Actions 用于处理异步操作或执行一些副作用。可以使用 defineActions 函数来定义 Actions。</p><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法"><span>使用方法</span></a></h2><h3 id="安装和初始化store" tabindex="-1"><a class="header-anchor" href="#安装和初始化store"><span>安装和初始化Store</span></a></h3><p>1.先在 store 文件夹新建一个 JS 文件并引入 pinia</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createPinia <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 引入pinia模块</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createPinia</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建一个仓库</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span> <span class="token comment">// 抛出这个仓库</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.再全局引入 pinia</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> createApp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">&quot;./App3.vue&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">&quot;./store&quot;</span><span class="token punctuation">;</span> <span class="token comment">//引入这个仓库</span></span>
<span class="line"></span>
<span class="line"><span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span><span class="token string">&quot;#app&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 再use一下</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="state-的使用方法。" tabindex="-1"><a class="header-anchor" href="#state-的使用方法。"><span>State 的使用方法。</span></a></h3><p>1.State：首先在 Pinia 中，每个状态管理模块都被称为一个 Store。开发者需要创建一个 Store 实例来定义和管理状态。在 store 文件夹的 js 中定义一个 Store 实例，通过 defineStore 函数来定义一个状态，并通过 state 属性来访问它。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span> <span class="token comment">// defineStore 是 store 的一部分</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> useUserStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 仓库数据源</span></span>
<span class="line">    <span class="token literal-property property">userInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;boy&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.在 vue 组件中访问 store 实例中的数据</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/store/user&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userStore <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用仓库</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userStore<span class="token punctuation">.</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问仓库中的数据</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="action-的使用方法" tabindex="-1"><a class="header-anchor" href="#action-的使用方法"><span>Action 的使用方法</span></a></h3><p>1.在 store 实例中定义 actions，通过 defineActions 函数来定义 Actions。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span> <span class="token comment">// defineStore 是 store 的一部分</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> useUserStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 仓库数据源</span></span>
<span class="line">    <span class="token literal-property property">userInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;boy&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">actions</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 定义actions</span></span>
<span class="line">    <span class="token function">updateName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 定义一个方法</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span> <span class="token comment">// 修改仓库中的数据</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.在 vue 组件中调用 actions</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/store/user&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userStore <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用仓库</span></span>
<span class="line">userStore<span class="token punctuation">.</span><span class="token function">updateName</span><span class="token punctuation">(</span><span class="token string">&quot;小红&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用仓库中的方法</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getters-的使用方法" tabindex="-1"><a class="header-anchor" href="#getters-的使用方法"><span>Getters 的使用方法</span></a></h3><p>1.在 store 实例中定义 getters，通过 defineGetters 函数来定义 getters。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> defineStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;pinia&quot;</span><span class="token punctuation">;</span> <span class="token comment">// defineStore 是 store 的一部分</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> useUserStore <span class="token operator">=</span> <span class="token function">defineStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function-variable function">state</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 仓库数据源</span></span>
<span class="line">    <span class="token literal-property property">userInfo</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">&quot;boy&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token literal-property property">getters</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 定义getters</span></span>
<span class="line">    <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 定义一个方法</span></span>
<span class="line">      <span class="token keyword">return</span> state<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;的年龄是&quot;</span> <span class="token operator">+</span> state<span class="token punctuation">.</span>userInfo<span class="token punctuation">.</span>age<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.在 vue 组件中访问 getters</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token punctuation">{</span> useUserStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@/store/user&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> userStore <span class="token operator">=</span> <span class="token function">useUserStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用仓库</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userStore<span class="token punctuation">.</span>fullName<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问仓库中的数据</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,27)]))}const l=s(t,[["render",o]]),r=JSON.parse('{"path":"/posts/frontend/pinia%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html","title":"pinia 使用方法","lang":"en-US","frontmatter":{"date":"2025-08-14T00:00:00.000Z","category":["frontend"],"tag":["vue","pinia"]},"headers":[{"level":2,"title":"什么是 pinia","slug":"什么是-pinia","link":"#什么是-pinia","children":[]},{"level":2,"title":"主要功能介绍","slug":"主要功能介绍","link":"#主要功能介绍","children":[]},{"level":2,"title":"使用方法","slug":"使用方法","link":"#使用方法","children":[{"level":3,"title":"安装和初始化Store","slug":"安装和初始化store","link":"#安装和初始化store","children":[]},{"level":3,"title":"State 的使用方法。","slug":"state-的使用方法。","link":"#state-的使用方法。","children":[]},{"level":3,"title":"Action 的使用方法","slug":"action-的使用方法","link":"#action-的使用方法","children":[]},{"level":3,"title":"Getters 的使用方法","slug":"getters-的使用方法","link":"#getters-的使用方法","children":[]}]}],"git":{"updatedTime":1755284715000,"contributors":[{"name":"Tom-Lee-CN","username":"Tom-Lee-CN","email":"tomweichat@qq.com","commits":4,"url":"https://github.com/Tom-Lee-CN"}],"changelog":[{"hash":"be5ade17100f40510d2b0358aad85e02fa8f6c4e","time":1755284715000,"email":"tomweichat@qq.com","author":"Tom-Lee-CN","message":"更新pinia使用方法"},{"hash":"af722504836c2638c9a90afc89531fa6acee9cbf","time":1755284492000,"email":"tomweichat@qq.com","author":"Tom-Lee-CN","message":"新增pinia使用方法"},{"hash":"d50f88d2b2a64cf106662990fae5456c6735904a","time":1755284242000,"email":"tomweichat@qq.com","author":"Tom-Lee-CN","message":"新增pinia使用方法"},{"hash":"17fb415ba592b6a39c0e5fdeeb9bae3023e7ff7a","time":1755284109000,"email":"tomweichat@qq.com","author":"Tom-Lee-CN","message":"新增pinia使用方法"}]},"filePathRelative":"posts/frontend/pinia使用方法.md","excerpt":"\\n<h2>什么是 pinia</h2>\\n<p>Pinia 是 Vue 的官方状态管理工具，作为 Vuex 的继任者，为 Vue 3 提供了更现代、灵活且易用的状态管理解决方案。它主要用于管理应用中的全局状态，特别适合在多个组件间共享数据的场景。</p>\\n<h2>主要功能介绍</h2>\\n<p>在官方文档中，Pinia 提供了四种功能，分别是：</p>\\n<p>Store：在 Pinia 中，每个状态管理模块都被称为一个 Store。开发者需要创建一个 Store 实例来定义和管理状态。<br>\\nState：在 Store 中定义状态。可以使用 defineState 函数来定义一个状态，并通过 state 属性来访问它。<br>\\nGetters：类似于 Vuex 中的 getters，用于从 State 中派生出一些状态。可以使用 defineGetters 函数来定义 getters。<br>\\nActions：在 Pinia 中，Actions 用于处理异步操作或执行一些副作用。可以使用 defineActions 函数来定义 Actions。</p>"}');export{l as comp,r as data};
