export const redirects = JSON.parse("{\"/posts/frontend/JS%E5%9F%BA%E7%A1%80_JS%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83+%E4%BD%9C%E7%94%A8%E5%9F%9F(%E4%B8%8A%E4%B8%8B%E6%96%87).html\":\"/posts/frontend/JS%E5%9F%BA%E7%A1%80_JS%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83_%E4%BD%9C%E7%94%A8%E5%9F%9F(%E4%B8%8A%E4%B8%8B%E6%96%87).html\"}")

export const routes = Object.fromEntries([
  ["/get-started.html", { loader: () => import(/* webpackChunkName: "get-started.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/get-started.html.js"), meta: {"title":"Get Started"} }],
  ["/", { loader: () => import(/* webpackChunkName: "index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/index.html.js"), meta: {"title":"Home"} }],
  ["/posts/backend/Cookie%E4%B8%8EStorage.html", { loader: () => import(/* webpackChunkName: "posts_backend_Cookie与Storage.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/backend/Cookie与Storage.html.js"), meta: {"_blog":{"title":"cookie and storage","author":"","date":"2025-06-16T00:00:00.000Z","category":["frontend"],"tag":["node","backend"],"excerpt":"\n<h2>Cookie</h2>\n<h3><strong>说明</strong>：</h3>\n<p>cookie由键值对字符串组成, 在设置Cookie时，可以指定以下属性：</p>\n<p>对<code>document.cookie</code> 重新赋值即可新增该<code>Cookie</code>, 而不是替换掉整个<code>Cookies</code> 。</p>\n<p>注意：如果需要替换某个<code>Cookie</code>, 必须保证<code>Domain</code>与<code>Path</code>一致。其中 Cookie 内容只能包括 Ascii 码字符，所以需要经过一层编码。</p>"},"title":"cookie and storage"} }],
  ["/posts/backend/Cookie%E7%9A%84%E8%B7%A8%E5%9F%9F%E4%BC%A0%E8%BE%93.html", { loader: () => import(/* webpackChunkName: "posts_backend_Cookie的跨域传输.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/backend/Cookie的跨域传输.html.js"), meta: {"_blog":{"title":"Cookie的跨域传输","author":"","date":"2025-06-16T00:00:00.000Z","category":["backend"],"tag":["node","backend"],"excerpt":"\n<h2>问题描述</h2>\n<p>1.后端已设置允许跨域，使用Express传递携带session的cookie给前端，在响应体的<code>set-cookie</code> 里面有值，但前端没有存储cookie同时在Application中并没有存储cookie值。</p>\n<p>2.原因是前端没有设置允许跨域传递cookie，给<code>xhr</code>的属性<code>withCredentials</code>赋值为true即可。</p>\n<h3>解决方法</h3>\n<p>1.后端允许跨域</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\"><pre><code><span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 设置允许跨域的域名</span></span>\n<span class=\"line\">    res<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\tres<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Methods'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\tres<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-headers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">\tres<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Max-age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 允许跨域传递cookie</span></span>\n<span class=\"line\">\tres<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Credentials'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>"},"title":"Cookie的跨域传输"} }],
  ["/posts/backend/CORS%E8%B7%A8%E5%9F%9F.html", { loader: () => import(/* webpackChunkName: "posts_backend_CORS跨域.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/backend/CORS跨域.html.js"), meta: {"_blog":{"title":"","author":"","date":"2025-07-06T00:00:00.000Z","category":["backend"],"tag":["node","backend"],"excerpt":"<h3>CORS跨域</h3>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// 设置后端响应头</span></span>\n<span class=\"line\"><span class=\"token comment\">// 设定运行访问的源(域，协议，端口)</span></span>\n<span class=\"line\">response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Origin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 设定运行访问的方法</span></span>\n<span class=\"line\">response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Methods'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 设定运行访问的自定义请求头</span></span>\n<span class=\"line\">response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-headers'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 是否允许携带身份凭证</span></span>\n<span class=\"line\">response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Credentials'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 指定预检请求的缓存时间</span></span>\n<span class=\"line\">response<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Access-Control-Allow-Max-age'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>"},"title":""} }],
  ["/posts/backend/Express%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80.html", { loader: () => import(/* webpackChunkName: "posts_backend_Express框架基础.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/backend/Express框架基础.html.js"), meta: {"_blog":{"title":"","author":"","date":"2025-06-16T00:00:00.000Z","category":["backend"],"tag":["node","backend"],"excerpt":"<h3>Express框架基础</h3>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// express 框架生成器</span></span>\n<span class=\"line\">npx express<span class=\"token operator\">-</span>generator</span>\n<span class=\"line\"><span class=\"token comment\">// 安装express</span></span>\n<span class=\"line\">npm install express</span>\n<span class=\"line\"><span class=\"token comment\">// 安装自动更新包</span></span>\n<span class=\"line\">npm install nodemon</span>\n<span class=\"line\"><span class=\"token comment\">// 基本使用</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token comment\">// 静态文件中间件</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span><span class=\"token string\">'public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/static'</span><span class=\"token punctuation\">,</span> express<span class=\"token punctuation\">.</span><span class=\"token function\">static</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'public'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token comment\">// 全局中间件</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myLogger</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'log'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token comment\">// 根据路由接收请求</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token comment\">// 局部中间件</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行了局部中间件\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token comment\">// 无匹配请求地址处理</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"找不到改请求地址\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token comment\">// 服务器请求的异常处理</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>stack<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"服务器出错\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">server is runing, port:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// express 的模板引擎</span></span>\n<span class=\"line\"><span class=\"token comment\">// 设置模板文件夹和模板引擎</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'views'</span><span class=\"token punctuation\">,</span> __dirname<span class=\"token operator\">+</span><span class=\"token string\">\"/views\"</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view engine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ejs'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">var</span> indexRouter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/index'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span> indexRouter<span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token comment\">// 下列代码为routes/index.js路由文件中的代码</span></span>\n<span class=\"line\">router<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">//调用模板解析引擎渲染页面,名为index的模板并传入一个对象为参数</span></span>\n<span class=\"line\">    res<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">title</span><span class=\"token operator\">:</span> <span class=\"token string\">'Express'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> router</span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>"},"title":""} }],
  ["/posts/backend/NODE%E4%B8%8EMYSQL.html", { loader: () => import(/* webpackChunkName: "posts_backend_NODE与MYSQL.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/backend/NODE与MYSQL.html.js"), meta: {"_blog":{"title":"NODE与MYSQL","author":"","date":"2025-06-16T00:00:00.000Z","category":["backend"],"tag":["node","backend"],"excerpt":"\n<h2>mysql</h2>\n<div class=\"language-JS line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"JS\"><pre><code><span class=\"line\">const mysql = require('mysql')</span>\n<span class=\"line\">const mysqlCnn = mysql.createConnection({</span>\n<span class=\"line\">    user: \"admin\",</span>\n<span class=\"line\">    password: \"Mm2332868127.\",</span>\n<span class=\"line\">    host: \"localhost\",</span>\n<span class=\"line\">    database: \"bilibili\"</span>\n<span class=\"line\">})</span>\n<span class=\"line\"></span>\n<span class=\"line\">mysqlCnn.connect(err=&gt;{</span>\n<span class=\"line\">    if(err){</span>\n<span class=\"line\">        console.warn(`连接mysql数据库失败！错误原因为: ${err}`)</span>\n<span class=\"line\">    }else{</span>\n<span class=\"line\">        console.log(\"连接mysql服务器成功！\")</span>\n<span class=\"line\">    }</span>\n<span class=\"line\">    </span>\n<span class=\"line\">})</span>\n<span class=\"line\"></span>\n<span class=\"line\">// // 增</span>\n<span class=\"line\">// mysqlCnn.query(\"INSERT INTO user (user_id, account, password) VALUES (223456, 'Tom3323', '12345678')\", (err, result)=&gt;{</span>\n<span class=\"line\">//     if(err){</span>\n<span class=\"line\">//         console.log(`数据更新出错！错误信息为： ${err}`)</span>\n<span class=\"line\">//     }</span>\n<span class=\"line\">// })</span>\n<span class=\"line\">// // 删</span>\n<span class=\"line\">// mysqlCnn.query(\"DELETE FROM user WHERE user_id = 11111\", err=&gt;{</span>\n<span class=\"line\">//     if(err){</span>\n<span class=\"line\">//         console.log(`数据更新出错！错误信息为： ${err}`)</span>\n<span class=\"line\">//     }</span>\n<span class=\"line\">// })</span>\n<span class=\"line\">// // 改</span>\n<span class=\"line\">// mysqlCnn.query(\"UPDATE user SET account = 'jerry', password = '333333' WHERE user_id = 11111 \", (err, result)=&gt;{</span>\n<span class=\"line\">//     if(err){</span>\n<span class=\"line\">//         console.log(`数据更新出错！错误信息为： ${err}`)</span>\n<span class=\"line\">//     }</span>\n<span class=\"line\">// })</span>\n<span class=\"line\">// // 查</span>\n<span class=\"line\">// mysqlCnn.query(SELECT * FROM user WHERE account='tomweichat@qq.com' and password='12345678' , (err, result)=&gt;{</span>\n<span class=\"line\">//     if(err){</span>\n<span class=\"line\">//         console.log(`数据更新出错！错误信息为： ${err}`)</span>\n<span class=\"line\">//     }</span>\n<span class=\"line\">// })</span>\n<span class=\"line\">// 断开连接</span>\n<span class=\"line\">mysqlCnn.release()</span>\n<span class=\"line\">module.exports = mysqlCnn</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>"},"title":"NODE与MYSQL"} }],
  ["/posts/backend/NODE%E4%B8%8E%E9%82%AE%E7%AE%B1%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81.html", { loader: () => import(/* webpackChunkName: "posts_backend_NODE与邮箱邮件发送.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/backend/NODE与邮箱邮件发送.html.js"), meta: {"_blog":{"title":"NODE与邮箱邮件发送","author":"","date":"2025-06-16T00:00:00.000Z","category":["backend"],"tag":["node","backend"],"excerpt":"\n<h3>NODE与邮箱邮件发送</h3>\n<p>邮箱验证码思路</p>\n<p>验证码发送阶段</p>\n<p>客户端上传邮箱地址到服务端，服务端通过生成随机验证码，并将这个验证码发送到用户上传的这个邮箱中。此时服务端需要将这个邮箱和验证码保存到数据库的某张表中（后文中使用Code来称呼这个表），同时保证这条记录的唯一性。并在有效时间内将这条记录删除（此时间就是验证码的有效时间）</p>\n<p>验证码验证阶段</p>\n<p>客户端将收到的验证码和邮箱重新发送到服务端，服务端开始验证：</p>\n<p>是否能够从Code中查询到这条验证码和邮箱与客户端发送一致的记录\n是：验证通过，并删除这条记录\n否：验证不通过\n验证码发送阶段\n————————————————</p>"},"title":"NODE与邮箱邮件发送"} }],
  ["/posts/backend/NODE%E4%B8%AD%E4%BD%BF%E7%94%A8UUID.html", { loader: () => import(/* webpackChunkName: "posts_backend_NODE中使用UUID.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/backend/NODE中使用UUID.html.js"), meta: {"_blog":{"title":"NODE中使用UUID","author":"","date":"2025-06-16T00:00:00.000Z","category":["backend"],"tag":["node","backend"],"excerpt":"\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// 用于生成UUID</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> crypto <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'crypto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 生成UUID</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> uuid <span class=\"token operator\">=</span> crypto<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>"},"title":"NODE中使用UUID"} }],
  ["/posts/backend/NODE%E5%8E%9F%E7%94%9FHTTP.html", { loader: () => import(/* webpackChunkName: "posts_backend_NODE原生HTTP.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/backend/NODE原生HTTP.html.js"), meta: {"_blog":{"title":"NODE原生HTTP","author":"","date":"2025-06-16T00:00:00.000Z","category":["backend"],"tag":["node","backend"],"excerpt":"\n<h3>创建基本的Node服务器并接收http请求(原生)</h3>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> hostName <span class=\"token operator\">=</span> <span class=\"token string\">'127.0.0.1'</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> http <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'url'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> http<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=&gt;</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 接收POST请求</span></span>\n<span class=\"line\">    <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>method <span class=\"token operator\">===</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> query<span class=\"token punctuation\">,</span> pathname <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathname <span class=\"token operator\">==</span> <span class=\"token string\">\"/post/userInfo\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">            req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">chunk</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">                <span class=\"token comment\">// 拼接数据</span></span>\n<span class=\"line\">                data <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>chunk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">            req<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">                data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">                console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">        <span class=\"token punctuation\">}</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> hostName<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">服务器已启动：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>hostName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token comment\">// 接收GET请求</span></span>\n<span class=\"line\">server<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">requset<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> query<span class=\"token punctuation\">,</span> pathname <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>requset<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token comment\">// 这里使用JSON.stringify(query)和JSON.parse(data)进行转换为对象 防止出现 [Object: null prototype] 的警告</span></span>\n<span class=\"line\">    <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    response<span class=\"token punctuation\">.</span><span class=\"token function\">writeHead</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token string-property property\">'Content-type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'text/plain'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    response<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token string\">'服务器已接收GET请求'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>"},"title":"NODE原生HTTP"} }],
  ["/posts/backend/SEESION%E4%B8%8EJWT.html", { loader: () => import(/* webpackChunkName: "posts_backend_SEESION与JWT.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/backend/SEESION与JWT.html.js"), meta: {"_blog":{"title":"SEESION与JWT","author":"","date":"2025-06-16T00:00:00.000Z","category":["backend"],"tag":["node","backend"],"excerpt":"\n<h2>Session</h2>\n<h3><strong>说明</strong></h3>\n<p>session类似服务器端的cookie，保存于服务器端，类似于服务器缓存。用户登陆了总需要验证吧，那么就在session中验证即可，session和cookie是一一对应关系。</p>\n<p>session的创建顺序</p>\n<ol>\n<li>\n<p>生成全局唯一标识符（sessionid）；</p>\n</li>\n<li>\n<p>开辟数据存储空间。一般会在内存中创建相应的数据结构，但这种情况下，系统一旦掉电，所有的会话数据就会丢失，如果是电子商务网站，这种事故会造成严重的后果。不过也可以写到文件里甚至存储在数据库中，这样虽然会增加I/O开销，但session可以实现某种程度的持久化，而且更有利于session的共享；</p>\n</li>\n<li>\n<p>将session的全局唯一标示符发送给客户端。\n问题的关键就在服务端如何发送这个session的唯一标识上。联系到HTTP协议，数据无非可以放到请求行、头域或Body里，基于此，一般来说会有两种常用的方式：cookie和URL重写。</p>\n</li>\n<li>\n<p>Cookie是如何被设置的呢？是被服务器返回的请求设置的。</p>\n</li>\n<li>\n<p>服务器会返回一个set-cookie的消息，通知浏览器要设置cookie了，于是浏览器会根据set-cookie里的字段来设置信息了.</p>\n</li>\n</ol>"},"title":"SEESION与JWT"} }],
  ["/posts/frontend/Cookie%E4%B8%8EStorage.html", { loader: () => import(/* webpackChunkName: "posts_frontend_Cookie与Storage.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/frontend/Cookie与Storage.html.js"), meta: {"_blog":{"title":"Cookie与Storage","author":"","date":"2025-06-16T00:00:00.000Z","category":["frontend"],"tag":["html","javascript","frontend"],"excerpt":"\n<h2>Cookie</h2>\n<h3><strong>说明</strong>：</h3>\n<p>cookie由键值对字符串组成, 在设置Cookie时，可以指定以下属性：</p>\n<p>对<code>document.cookie</code> 重新赋值即可新增该<code>Cookie</code>, 而不是替换掉整个<code>Cookies</code> 。</p>\n<p>注意：如果需要替换某个<code>Cookie</code>, 必须保证<code>Domain</code>与<code>Path</code>一致。其中 Cookie 内容只能包括 Ascii 码字符，所以需要经过一层编码。</p>"},"title":"Cookie与Storage"} }],
  ["/posts/frontend/CSS%E5%9F%BA%E7%A1%80.html", { loader: () => import(/* webpackChunkName: "posts_frontend_CSS基础.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/frontend/CSS基础.html.js"), meta: {"_blog":{"title":"CSS基础","author":"","date":"2025-06-16T00:00:00.000Z","category":["frontend"],"tag":["css","html"],"excerpt":"\n<h3>SEO</h3>\n<p>常用方法</p>\n<ol>\n<li>标签语义化</li>\n<li>竞价排名(花钱)</li>\n<li>网页制作成 HTML 后缀</li>\n</ol>\n<p>网页头部三大标签</p>\n<ol>\n<li>title 网页标题</li>\n<li>description 网页描述</li>\n<li>网页关键词</li>\n</ol>\n<h4>Favicon 图标</h4>\n<div class=\"language-html line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"html\"><pre><code><span class=\"line\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>shortcut icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>favicon.ico<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>image/x-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">&gt;</span></span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>"},"title":"CSS基础"} }],
  ["/posts/frontend/JS%E5%9F%BA%E7%A1%80_JS%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83_%E4%BD%9C%E7%94%A8%E5%9F%9F(%E4%B8%8A%E4%B8%8B%E6%96%87).html", { loader: () => import(/* webpackChunkName: "posts_frontend_JS基础_JS执行环境_作用域(上下文).html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/frontend/JS基础_JS执行环境_作用域(上下文).html.js"), meta: {"_blog":{"title":"JS执行环境+作用域(上下文)","author":"","date":"2025-07-06T00:00:00.000Z","category":["frontend"],"tag":["frontend","backend","common sense","javascript","nodejs"],"excerpt":"\n<h2>函数</h2>\n<h3>执行环境</h3>\n<ul>\n<li>执行环境(执行上下文)是<code>JS</code>中非常重要的一个概念。</li>\n<li>每个执行环境都有一个与之关联的<strong>虚拟对象</strong>(执行上下文对象)</li>\n<li>执行环境中定义的所有<strong>变量</strong>和<strong>函数</strong>都保存在这个<strong>执行上下文对象</strong>中，供解析器在处理数据时使用。</li>\n</ul>\n<h3>预处理</h3>\n<ul>\n<li>将变量和函数作为执行上下文对象的属性放到这个对象上的这个过程，被称为<code>预处理</code></li>\n<li>预处理发生在代码将要执行之前</li>\n<li>虽然<code>JS</code>是解释执行的语言，但是在解释执行之前，还是有个<strong>预处理</strong>的过程</li>\n<li>为代码的执行做准备，提前检查出代码中的错误</li>\n<li>算是做了一个通篇扫描的过程</li>\n<li>这也是之前讲过的变量的声明提升和函数提升的原因</li>\n</ul>"},"title":"JS执行环境+作用域(上下文)"} }],
  ["/posts/frontend/Promise.html", { loader: () => import(/* webpackChunkName: "posts_frontend_Promise.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/frontend/Promise.html.js"), meta: {"_blog":{"title":"","author":"","date":"2025-06-16T00:00:00.000Z","category":["frontend"],"tag":["node","backend"],"excerpt":"\n<h1>Promise</h1>\n<h2>Promise的介绍</h2>\n<p>Promise<strong>是异步编程的一种解决方案，<strong>它的<a href=\"https://so.csdn.net/so/search?q=%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0&amp;spm=1001.2101.3001.7020\" target=\"_blank\" rel=\"noopener noreferrer\">构造函数</a>是</strong>同步</strong>执行的，then 方法是<strong>异步</strong>执行的，所以Promise创建后里面的函数会立即执行，构造函数中的resolve和reject只有第一次执行有效，，也就是说<strong>Promise状态一旦改变就不能再变</strong></p>"},"title":""} }],
  ["/posts/frontend/%E5%8E%9F%E5%9E%8B%E4%B8%8E%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html", { loader: () => import(/* webpackChunkName: "posts_frontend_原型与面向对象.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/frontend/原型与面向对象.html.js"), meta: {"_blog":{"title":"原型与面向对象","author":"","date":"2025-06-16T00:00:00.000Z","category":["frontend"],"tag":["http","frontend","javascript"],"excerpt":"\n<h3>一切皆对象</h3>\n<p>原型和原型链都是来源于对象而服务于对象的概念，所以我们要先明确一点：</p>\n<p><strong>JavaScript中一切引用类型都是对象，对象就是属性的集合。</strong></p>\n<p><code>Array类型</code>、<code>Function类型</code>、<code>Object类型</code>、<code>Date类型</code>、<code>RegExp类型</code>等都是引用类型。</p>\n<p>也就是说 <strong>数组是对象、函数是对象、正则是对象、对象还是对象。</strong></p>\n<h3>原型与原型链是什么</h3>"},"title":"原型与面向对象"} }],
  ["/posts/frontend/%E5%8E%9F%E7%94%9F%E4%B8%8EFetch%E7%9A%84HTTP%E8%AF%B7%E6%B1%82.html", { loader: () => import(/* webpackChunkName: "posts_frontend_原生与Fetch的HTTP请求.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/frontend/原生与Fetch的HTTP请求.html.js"), meta: {"_blog":{"title":"原生与Fetch的HTTP请求","author":"","date":"2025-06-16T00:00:00.000Z","category":["frontend"],"tag":["http","frontend","javascript"],"excerpt":"\n<h2>原生请求</h2>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// 发起GET请求</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://127.0.0.1:3000?name=tom&amp;password=123456'</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>xhr<span class=\"token punctuation\">.</span>status<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\">xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// 发起POST请求</span></span>\n<span class=\"line\"><span class=\"token keyword\">const</span> xhr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://127.0.0.1:3000/post/userInfo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">xhr<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Content-type'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'application/x-www-formurlencoded'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=&gt;</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Error:</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>xhr<span class=\"token punctuation\">.</span>statis<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">    <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">\"12312321\"</span><span class=\"token punctuation\">,</span></span>\n<span class=\"line\">    <span class=\"token literal-property property\">email</span><span class=\"token operator\">:</span> <span class=\"token string\">\"131123@qq.com\"</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>"},"title":"原生与Fetch的HTTP请求"} }],
  ["/posts/frontend/%E9%97%AD%E5%8C%85%E4%B8%8Ethis%E6%8C%87%E5%90%91%E5%92%8C%E5%87%BD%E6%95%B0%E4%B8%8A%E4%B8%8B%E6%96%87%E8%B0%83%E7%94%A8.html", { loader: () => import(/* webpackChunkName: "posts_frontend_闭包与this指向和函数上下文调用.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/frontend/闭包与this指向和函数上下文调用.html.js"), meta: {"_blog":{"title":"闭包与this和函数上下文调用","author":"","date":null,"category":[],"tag":[],"excerpt":"\n<h2>闭包</h2>\n<p>概念：可以访问到其他函数内部变量的函数</p>\n<p>作用：解决变量污染（一般用于回调函数）</p>\n<p>备注：非必要不用闭包，如果子函数一直没有接收到参数可能导致内存一直无法释放（函数未执行完成，知道运行完成后才会执行垃圾回收）</p>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\"><pre><code><span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">power</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">base<span class=\"token punctuation\">,</span> exponent</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exponent <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">    <span class=\"token keyword\">return</span> base <span class=\"token operator\">*</span> <span class=\"token function\">power</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">,</span> exponent <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">power</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token comment\">// → 8</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>"},"title":"闭包与this和函数上下文调用"} }],
  ["/posts/weekend/archive2.html", { loader: () => import(/* webpackChunkName: "posts_weekend_archive2.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/weekend/archive2.html.js"), meta: {"_blog":{"title":"Archive Article2","author":"","date":"1998-01-02T00:00:00.000Z","category":["frontend"],"tag":["WWII"],"excerpt":"\n<h2>Heading 2</h2>\n<p>Here is the content.</p>\n<h3>Heading 3</h3>\n<p>Here is the content.</p>\n"},"title":"Archive Article2"} }],
  ["/posts/weekend/Game_Alice%20Madness%20Returns.html", { loader: () => import(/* webpackChunkName: "posts_weekend_Game_Alice Madness Returns.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/weekend/Game_Alice Madness Returns.html.js"), meta: {"_blog":{"title":"爱丽丝:疯狂回归 60 帧设置","author":"","date":"2025-07-06T00:00:00.000Z","category":["weekend"],"tag":["Game","Game option"],"excerpt":"\n<p><img src=\"https://upload.wikimedia.org/wikipedia/zh/d/d8/AliceMadnessReturns.jpg\" alt=\"\"></p>\n<h2>简介</h2>\n<p>《<strong>爱丽丝：疯狂回归</strong>》（英语：<em>Alice: Madness Returns</em>，香港和台湾译作“<strong>爱丽丝惊魂记：疯狂再临</strong>”）是一款由上海<a href=\"https://zh.wikipedia.org/wiki/%E9%BA%BB%E8%BE%A3%E9%A9%AC%E5%B7%A5%E4%BD%9C%E5%AE%A4\" target=\"_blank\" rel=\"noopener noreferrer\">麻辣马工作室</a>开发并由<a href=\"https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%95%86%E8%97%9D%E9%9B%BB\" target=\"_blank\" rel=\"noopener noreferrer\">艺电</a>发行的<a href=\"https://zh.wikipedia.org/wiki/%E6%81%90%E6%80%96%E9%81%8A%E6%88%B2\" target=\"_blank\" rel=\"noopener noreferrer\">恐怖</a>题材的<a href=\"https://zh.wikipedia.org/wiki/%E5%8A%A8%E4%BD%9C%E5%86%92%E9%99%A9%E6%B8%B8%E6%88%8F\" target=\"_blank\" rel=\"noopener noreferrer\">动作冒险游戏</a>，本作是 2000 年 10 月 6 日推出的《<a href=\"https://zh.wikipedia.org/wiki/%E6%84%9B%E9%BA%97%E7%B5%B2%E9%A9%9A%E9%AD%82%E8%A8%98\" target=\"_blank\" rel=\"noopener noreferrer\">爱丽丝梦游魔境</a>》（<em>American McGee's Alice</em>）的续集。</p>"},"title":"爱丽丝:疯狂回归 60 帧设置"} }],
  ["/posts/weekend/Git%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html", { loader: () => import(/* webpackChunkName: "posts_weekend_Git的基本使用.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/weekend/Git的基本使用.html.js"), meta: {"_blog":{"title":"GIT的基本使用","author":"","date":"2025-06-16T00:00:00.000Z","category":["weekend"],"tag":["GIT"],"excerpt":"\n<h2>基本使用</h2>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\"><pre><code><span class=\"line\"><span class=\"token comment\">// 这个命令，会在“~/.gitconfig”中以如下形式输出设置文件。</span></span>\n<span class=\"line\">$ git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>name <span class=\"token string\">\"Firstname Lastname\"</span></span>\n<span class=\"line\">$ git config <span class=\"token operator\">--</span>global user<span class=\"token punctuation\">.</span>email <span class=\"token string\">\"your_email@example.com\"</span></span>\n<span class=\"line\"><span class=\"token punctuation\">[</span>user<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">  name <span class=\"token operator\">=</span> Firstname Lastname</span>\n<span class=\"line\">  email <span class=\"token operator\">=</span> your_email@example<span class=\"token punctuation\">.</span>com</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 将 color.ui 设置为 auto 可以让命令的输出拥有更高的可读性。</span></span>\n<span class=\"line\">git config <span class=\"token operator\">--</span>global color<span class=\"token punctuation\">.</span>ui auto</span>\n<span class=\"line\"><span class=\"token comment\">// “~/.gitconfig”中就会增加下面一行。</span></span>\n<span class=\"line\"><span class=\"token punctuation\">[</span>color<span class=\"token punctuation\">]</span></span>\n<span class=\"line\">  ui <span class=\"token operator\">=</span> auto</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">//生成SSH后复制至GitHub同步</span></span>\n<span class=\"line\">git<span class=\"token operator\">-</span>keygen <span class=\"token operator\">-</span>t rsa <span class=\"token operator\">-</span><span class=\"token constant\">C</span></span>\n<span class=\"line\"><span class=\"token comment\">// 1. git初始化 (必须初始化)</span></span>\n<span class=\"line\">git init</span>\n<span class=\"line\"><span class=\"token comment\">// 2. 查看仓库状态</span></span>\n<span class=\"line\">git status</span>\n<span class=\"line\"><span class=\"token comment\">// 3. 向暂存区添加文件</span></span>\n<span class=\"line\">git add</span>\n<span class=\"line\"><span class=\"token comment\">// 4. 保存仓库的历史纪录 git commit -m \"快速备注\"。vim编辑器使用i进行输入，写详细备注时第一行是简要内容，第二行空行，第三行是详细内容。输入完成后按ESC输入:wq完成编辑</span></span>\n<span class=\"line\">git commit</span>\n<span class=\"line\"><span class=\"token comment\">// 中止提交</span></span>\n<span class=\"line\">如果在编辑器启动后想中止提交，提交信息留空并直接关闭编辑器，随后提交就会被中止。</span>\n<span class=\"line\"><span class=\"token comment\">// 修改上一条提交的信息</span></span>\n<span class=\"line\">git commit <span class=\"token operator\">--</span>amend</span>\n<span class=\"line\"><span class=\"token comment\">// 5. 查看提交日志 git log -p可查看文件的改动</span></span>\n<span class=\"line\">git log</span>\n<span class=\"line\"><span class=\"token comment\">// 6. 查看当前暂存区与工作树的差别,git diff HEAD是最新差别</span></span>\n<span class=\"line\">git diff</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 显示分支一览表  git branch -a可以查看当前仓库和远程仓库的分支信息</span></span>\n<span class=\"line\">git branch </span>\n<span class=\"line\"><span class=\"token comment\">// 切换分支</span></span>\n<span class=\"line\">git checkout <span class=\"token operator\">-</span>b 分支名</span>\n<span class=\"line\"><span class=\"token comment\">// 合并分支</span></span>\n<span class=\"line\">git merge <span class=\"token operator\">--</span>no<span class=\"token operator\">-</span>ff 分支名</span>\n<span class=\"line\"><span class=\"token comment\">// 以图标形式查看分支</span></span>\n<span class=\"line\">git log <span class=\"token operator\">--</span>graph</span>\n<span class=\"line\"><span class=\"token comment\">// 回溯历史版本</span></span>\n<span class=\"line\">git reset <span class=\"token operator\">--</span>head 历史版本的哈希值</span>\n<span class=\"line\"><span class=\"token comment\">// 查看当前仓库执行过的操作的日志</span></span>\n<span class=\"line\">git reflog</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 添加远程仓库</span></span>\n<span class=\"line\">git remote add origin git@github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span>用户名称<span class=\"token operator\">/</span>仓库名<span class=\"token punctuation\">.</span>git</span>\n<span class=\"line\"><span class=\"token comment\">// 推送至远程仓库 -u参数是设置为本地仓库的上游(upstream)</span></span>\n<span class=\"line\">git push <span class=\"token operator\">-</span>u origin master</span>\n<span class=\"line\"><span class=\"token comment\">// 获取远程仓库</span></span>\n<span class=\"line\">git clone git@github<span class=\"token punctuation\">.</span>com<span class=\"token operator\">:</span>用户名称<span class=\"token operator\">/</span>仓库名<span class=\"token punctuation\">.</span>git</span>\n<span class=\"line\"></span>\n<span class=\"line\"><span class=\"token comment\">// 本地commit回退.回退到某次commit</span></span>\n<span class=\"line\">git reset <span class=\"token operator\">--</span>hard commitID</span>\n<span class=\"line\"><span class=\"token comment\">// 本地commit回退后，提交让远程仓库同步回退</span></span>\n<span class=\"line\">git push <span class=\"token operator\">-</span>f origin main</span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>"},"title":"GIT的基本使用"} }],
  ["/posts/weekend/sticky.html", { loader: () => import(/* webpackChunkName: "posts_weekend_sticky.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/weekend/sticky.html.js"), meta: {"_blog":{"title":"Sticky Article","author":"","date":"2021-01-01T00:00:00.000Z","category":["frontend"],"tag":["tag E"],"excerpt":"<p>A sticky article demo.</p>"},"title":"Sticky Article"} }],
  ["/posts/weekend/sticky2.html", { loader: () => import(/* webpackChunkName: "posts_weekend_sticky2.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/weekend/sticky2.html.js"), meta: {"_blog":{"title":"Sticky Article with Higher Priority","author":"","date":"2020-01-01T00:00:00.000Z","category":["backend"],"tag":["tag E"],"excerpt":"\n<p>Excerpt information which is added manually.</p>\n"},"title":"Sticky Article with Higher Priority"} }],
  ["/posts/weekend/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0.html", { loader: () => import(/* webpackChunkName: "posts_weekend_回调函数.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/posts/weekend/回调函数.html.js"), meta: {"_blog":{"title":"回调函数","author":"","date":"2025-07-06T00:00:00.000Z","category":["backend"],"tag":["common sense"],"excerpt":"\n<h2>什么是回调函数</h2>\n<blockquote>\n<p>回调函数：将一个函数作为参数传递到另外一个函数中，并在另一个函数当中调用</p>\n</blockquote>\n<div class=\"language-javascript line-numbers-mode\" data-highlighter=\"prismjs\" data-ext=\"js\"><pre><code><span class=\"line\">js 体验<span class=\"token constant\">AI</span>代码助手 代码解读复制代码<span class=\"token keyword\">function</span> <span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 回调函数，接收的是函数</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fn1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\">  <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 调用接收进来的函数</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token keyword\">function</span> <span class=\"token function\">fn2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span>\n<span class=\"line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fn2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n<span class=\"line\"><span class=\"token punctuation\">}</span></span>\n<span class=\"line\"><span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span>fn2<span class=\"token punctuation\">)</span></span>\n<span class=\"line\"></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>"},"title":"回调函数"} }],
  ["/404.html", { loader: () => import(/* webpackChunkName: "404.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/404.html.js"), meta: {"title":""} }],
  ["/category/", { loader: () => import(/* webpackChunkName: "category_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/category/index.html.js"), meta: {"title":"Categories"} }],
  ["/category/frontend/", { loader: () => import(/* webpackChunkName: "category_frontend_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/category/frontend/index.html.js"), meta: {"title":"Category frontend"} }],
  ["/category/backend/", { loader: () => import(/* webpackChunkName: "category_backend_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/category/backend/index.html.js"), meta: {"title":"Category backend"} }],
  ["/category/weekend/", { loader: () => import(/* webpackChunkName: "category_weekend_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/category/weekend/index.html.js"), meta: {"title":"Category weekend"} }],
  ["/tag/", { loader: () => import(/* webpackChunkName: "tag_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/index.html.js"), meta: {"title":"Tags"} }],
  ["/tag/node/", { loader: () => import(/* webpackChunkName: "tag_node_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/node/index.html.js"), meta: {"title":"Tag node"} }],
  ["/tag/backend/", { loader: () => import(/* webpackChunkName: "tag_backend_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/backend/index.html.js"), meta: {"title":"Tag backend"} }],
  ["/tag/html/", { loader: () => import(/* webpackChunkName: "tag_html_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/html/index.html.js"), meta: {"title":"Tag html"} }],
  ["/tag/javascript/", { loader: () => import(/* webpackChunkName: "tag_javascript_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/javascript/index.html.js"), meta: {"title":"Tag javascript"} }],
  ["/tag/frontend/", { loader: () => import(/* webpackChunkName: "tag_frontend_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/frontend/index.html.js"), meta: {"title":"Tag frontend"} }],
  ["/tag/css/", { loader: () => import(/* webpackChunkName: "tag_css_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/css/index.html.js"), meta: {"title":"Tag css"} }],
  ["/tag/common-sense/", { loader: () => import(/* webpackChunkName: "tag_common-sense_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/common-sense/index.html.js"), meta: {"title":"Tag common sense"} }],
  ["/tag/nodejs/", { loader: () => import(/* webpackChunkName: "tag_nodejs_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/nodejs/index.html.js"), meta: {"title":"Tag nodejs"} }],
  ["/tag/http/", { loader: () => import(/* webpackChunkName: "tag_http_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/http/index.html.js"), meta: {"title":"Tag http"} }],
  ["/tag/wwii/", { loader: () => import(/* webpackChunkName: "tag_wwii_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/wwii/index.html.js"), meta: {"title":"Tag WWII"} }],
  ["/tag/game/", { loader: () => import(/* webpackChunkName: "tag_game_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/game/index.html.js"), meta: {"title":"Tag Game"} }],
  ["/tag/game-option/", { loader: () => import(/* webpackChunkName: "tag_game-option_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/game-option/index.html.js"), meta: {"title":"Tag Game option"} }],
  ["/tag/git/", { loader: () => import(/* webpackChunkName: "tag_git_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/git/index.html.js"), meta: {"title":"Tag GIT"} }],
  ["/tag/tag-e/", { loader: () => import(/* webpackChunkName: "tag_tag-e_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/tag/tag-e/index.html.js"), meta: {"title":"Tag tag E"} }],
  ["/article/", { loader: () => import(/* webpackChunkName: "article_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/article/index.html.js"), meta: {"title":"Articles"} }],
  ["/timeline/", { loader: () => import(/* webpackChunkName: "timeline_index.html" */"C:/Users/Tom-Desktop-GIGABYTE/Documents/work space/Blog/docs/.vuepress/.temp/pages/timeline/index.html.js"), meta: {"title":"Timeline"} }],
]);

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updateRoutes) {
    __VUE_HMR_RUNTIME__.updateRoutes(routes)
  }
  if (__VUE_HMR_RUNTIME__.updateRedirects) {
    __VUE_HMR_RUNTIME__.updateRedirects(redirects)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ routes, redirects }) => {
    __VUE_HMR_RUNTIME__.updateRoutes(routes)
    __VUE_HMR_RUNTIME__.updateRedirects(redirects)
  })
}
